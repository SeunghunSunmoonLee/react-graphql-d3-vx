{"version":3,"sources":["modules/record.js","modules/index.js","store.js","components/Histogram/index.js","containers/home/index.js","containers/about/index.js","containers/app/index.js","index.js"],"names":["initialState","combineReducers","record","state","arguments","length","undefined","type","history","createHistory","middleware","thunk","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","connectRouter","rootReducer","Histogram","_ref","data","width","height","xMax","yMax","xScale","scaleBand","rangeRound","domain","map","obj","month","padding","yScale","scaleLinear","Math","max","Object","toConsumableArray","posts","react_default","a","createElement","fill","rx","vx_group_es","left","top","index","numPosts","barWidth","bandwidth","barHeight","barX","barY","vx_shape_es","key","x","y","onClick","event","alert","vx_axis_es","scale","label","labelProps","fontSize","tickFormat","value","tickProps","dx","opacity","GET_POSTS","gql","_templateObject","client","ApolloClient","uri","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Home","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","postsByMonth","query","then","response","allPosts","forEach","post","createdAt","split","push","postsByMonthSorted","keys","sort","b","setState","react","style","minHeight","display","justifyContent","flexDirection","alignItems","fontWeight","React","Component","About","App","Switch","Route","exact","path","component","withRouter","connect","__webpack_require__","d","__webpack_exports__","src_client","ReactDOM","render","react_apollo_browser_umd","es","store","lib","app","document","getElementById"],"mappings":"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","file":"static/js/main.6e2eda92.chunk.js","sourcesContent":["const initialState = {\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport record from './record'\n\nexport default combineReducers({\n  record\n})\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport thunk from 'redux-thunk'\nimport createHistory from 'history/createBrowserHistory'\nimport rootReducer from './modules'\n\nexport const history = createHistory()\n\nconst initialState = {}\nconst enhancers = []\nconst middleware = [thunk, routerMiddleware(history)]\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n)\n\nexport default createStore(\n  connectRouter(history)(rootReducer),\n  initialState,\n  composedEnhancers\n)\n","import React from 'react';\nimport { Bar } from '@vx/shape';\nimport { Group } from '@vx/group';\nimport { GradientTealBlue } from '@vx/gradient';\nimport { AxisBottom, AxisLeft } from '@vx/axis';\n\nimport { scaleBand, scaleLinear } from '@vx/scale';\n\nexport default ({ data, width, height }) => {\n  // bounds\n  const xMax = width;\n  const yMax = height - 120;\n\n  // scales\n  const xScale = scaleBand({\n    rangeRound: [0, xMax],\n    domain: data.map(obj => obj.month),\n    padding: 0.4\n  });\n  const yScale = scaleLinear({\n    rangeRound: [yMax, 0],\n    domain: [0, Math.max(...data.map(obj => obj.posts.length))]\n  });\n  return (\n    <svg width={width+100} height={height}>\n      <rect width={width+100} height={height} fill={\"url(#teal)\"} rx={14} />\n      <Group left={100} top={50}>\n        {data.map((obj, index) => {\n          let numPosts = obj.posts.length\n          const barWidth = xScale.bandwidth();\n          const barHeight = yMax - yScale(numPosts);\n          const barX = xScale(obj.month);\n          const barY = yMax - barHeight;\n          return (\n            <Bar\n              key={`bar-${obj.month}`}\n              x={barX}\n              y={barY}\n              width={barWidth}\n              height={barHeight}\n              fill=\"rgba(23, 233, 217, .5)\"\n              onClick={event => {\n                alert(`clicked: ${obj.month} number of posts: ${numPosts}`);\n              }}\n            />\n          )\n        })}\n      </Group>\n      <AxisBottom\n         scale={xScale}\n         top={yMax + 50}\n         left={100}\n         label='Month'\n         labelProps={{ fontSize: 24, fill: 'rgba(23, 233, 217, .8)' }}\n         tickFormat={(value, index) => `${value}`}\n         tickProps={(value, index) => ({\n           dx: \"0.33em\",\n           fill: \"rgba(23, 233, 217, .8)\",\n           fontSize: 16,\n           opacity: index % 2 === 0 ? 0.5 : 0.9,\n         })}\n       />\n       <AxisLeft\n         scale={yScale}\n         top={50}\n         left={100}\n         label=\"Posts\"\n         labelProps={{ fontSize: 24, fill: 'rgba(23, 233, 217, .8)' }}\n         tickFormat={(value, index) => `${value}`}\n         tickProps={(value, index) => ({\n           dx: \"0.33em\",\n           fill: \"rgba(23, 233, 217, .8)\",\n           fontSize: 16,\n           opacity: index % 2 === 0 ? 0.5 : 0.9,\n         })}\n       />\n    </svg>\n  );\n};\n","import React, {Fragment} from 'react'\nimport ReactDOM from 'react-dom';\nimport './styles.css';\n\n// import { push } from 'connected-react-router'\n// import { bindActionCreators } from 'redux'\n// import { connect } from 'react-redux'\n// import gql from 'graphql-tag';\nimport ApolloClient, { gql } from 'apollo-boost';\n\nimport { Query, Mutation } from 'react-apollo';\nimport axios from 'axios';\n// import {client} from 'index'\nimport Histogram from 'components/Histogram'\nexport const GET_POSTS = gql`{\n  allPosts(count: 100) {\n\t  id,\n    createdAt\n\t}\n}`\n// const axiosGraphQL = axios.create({\n//   baseURL: 'http://localhost:4000',\n// });\nconst client = new ApolloClient({\n  uri: 'https://fakerql.com/graphql',\n});\nconst months = {\n  Jan: 1,\n  Feb: 2,\n  Mar: 3,\n  Apr: 4,\n  May: 5,\n  Jun: 6,\n  Jul: 7,\n  Aug: 8,\n  Sep: 9,\n  Oct: 10,\n  Nov: 11,\n  Dec: 12\n}\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n  componentDidMount() {\n    let postsByMonth = {}\n    client\n      .query({\n        query: GET_POSTS,\n      })\n      .then(response => {\n        let posts = response.data.allPosts\n        posts.forEach(post => {\n          let month = post.createdAt.split(' ')[1]\n          let year = post.createdAt.split(' ')[3]\n          if(year === '2018') {\n            if(!postsByMonth[month]) {\n              postsByMonth[month] = [post]\n            } else {\n              postsByMonth[month].push(post)\n            }\n          }\n        })\n        let postsByMonthSorted = Object.keys(postsByMonth).map(month => ({month, posts: postsByMonth[month]})).sort((a,b) => months[a.month]-months[b.month])\n        this.setState({postsByMonthSorted})\n      });\n  }\n  render() {\n    if(this.state.postsByMonthSorted) {\n      return (\n        <Fragment>\n          <div style={{width: '100%', minHeight: '100vh', display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center'}}>\n            <h1>React GraphQL D3. Number of Posts per month</h1>\n            <Histogram\n              data={this.state.postsByMonthSorted}\n              width={1000}\n              height={600}\n            />\n          </div>\n        </Fragment>\n      );\n    }\n    return (\n      <div style={{width: '100%', minHeight: '100vh', display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center'}}>\n        <div style={{fontSize: '40px', fontWeight: 'bold'}}>Loading</div>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React from 'react'\n\nconst About = () => (\n  <div>\n    <h1>About Page</h1>\n    <p>Did you get here via Redux?</p>\n  </div>\n)\n\nexport default About\n","import React from 'react'\nimport { Switch, Route, Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Home from '../home'\nimport About from '../about'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/about-us\" component={About} />\n      </Switch>\n    )\n  }\n}\n\nexport default withRouter(connect(null, null)(App))\n","import React from 'react'\nimport ReactDOM, { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { ApolloProvider } from 'react-apollo';\n// import { ApolloClient } from 'apollo-client';\n// import { HttpLink } from 'apollo-link-http';\n// import { InMemoryCache } from 'apollo-cache-inmemory';\nimport ApolloClient from 'apollo-boost';\n\nimport store, { history } from './store'\nimport App from './containers/app'\n\nimport 'sanitize.css/sanitize.css'\nimport './index.css'\n\nexport const client = new ApolloClient({\n  uri: 'https://fakerql.com/graphql',\n});\n// const gql_URL = 'http://localhost:4000';\n//\n// const httpLink = new HttpLink({\n//   uri: gql_URL,\n// });\n// const cache = new InMemoryCache();\n// const client = new ApolloClient({\n//   link: httpLink,\n//   cache,\n// });\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}